# Default values for keycloak-kafka-event-listener
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Keycloak configuration
keycloak:
  image:
    registry: docker.io
    repository: scriptonbasestar/keycloak-kafka-event-listener
    tag: "0.0.2-SNAPSHOT"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # Replica configuration
  replicaCount: 2
  
  # Admin user configuration
  auth:
    adminUser: admin
    adminPassword: admin
    existingSecret: ""
    passwordSecretKey: password
  
  # Database configuration
  database:
    vendor: postgres
    host: ""
    port: 5432
    database: keycloak
    username: keycloak
    password: password
    existingSecret: ""
    existingSecretPasswordKey: password
    existingSecretUsernameKey: username
  
  # Proxy configuration
  proxy:
    enabled: true
    mode: edge
  
  # HTTP configuration
  http:
    enabled: true
    port: 8080
  
  # HTTPS configuration
  https:
    enabled: false
    port: 8443
    certificateSecret: ""
  
  # Health and metrics
  health:
    enabled: true
  metrics:
    enabled: true
    port: 9000
  
  # JVM configuration
  jvm:
    heapSize: "1024m"
    maxHeapSize: "2048m"
    gcOptions: "-XX:+UseG1GC -XX:MaxGCPauseMillis=200"
  
  # Keycloak startup configuration
  keycloakConfigCli:
    enabled: false
  
  # Extra environment variables
  extraEnvVars: []
  
  # Extra volume mounts
  extraVolumeMounts: []
  
  # Extra volumes
  extraVolumes: []

# Kafka Event Listener configuration
kafkaEventListener:
  enabled: true
  
  kafka:
    # Kafka connection settings
    bootstrapServers: "kafka:9092"
    securityProtocol: PLAINTEXT
    saslMechanism: PLAIN
    saslJaasConfig: ""
    
    # SSL/TLS settings
    ssl:
      enabled: false
      truststoreLocation: ""
      truststorePassword: ""
      keystoreLocation: ""
      keystorePassword: ""
    
    # Topic configuration
    topics:
      userEvents: "keycloak.user.events"
      adminEvents: "keycloak.admin.events"
    
    # Event filtering
    userEvents:
      enabled: true
      includedTypes: "LOGIN,LOGOUT,REGISTER,UPDATE_PROFILE,UPDATE_PASSWORD,LOGIN_ERROR,REGISTER_ERROR"
    
    adminEvents:
      enabled: true
      includedOperations: "CREATE,UPDATE,DELETE,ACTION"
    
    # Producer configuration
    producer:
      acks: "1"
      retries: 3
      batchSize: 16384
      lingerMs: 5
      bufferMemory: 33554432
      compressionType: "snappy"
      maxRequestSize: 1048576
      enableIdempotence: false
      maxInFlightRequests: 5
    
    # Performance tuning
    performance:
      maxPollRecords: 500
      requestTimeoutMs: 30000
      deliveryTimeoutMs: 120000
      retryBackoffMs: 100
    
    # Monitoring
    monitoring:
      clientId: "keycloak-event-listener"
      metricsRecordingLevel: "INFO"

# Service configuration
service:
  type: ClusterIP
  port: 8080
  httpsPort: 8443
  metricsPort: 9000
  sessionAffinity: None
  sessionAffinityConfig: {}
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: keycloak.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# ServiceAccount configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod configuration
podAnnotations: {}
podSecurityContext:
  fsGroup: 1000

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Node selection
nodeSelector: {}
tolerations: []
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Startup and readiness probes
startupProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 30
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /health/ready
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 3
  successThreshold: 1

livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3
  successThreshold: 1

# Persistence
persistence:
  enabled: true
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}

# ConfigMap and Secret management
configMaps:
  keycloakConfig:
    enabled: true
    data: {}
  
  kafkaConfig:
    enabled: true
    data: {}

secrets:
  keycloakCredentials:
    enabled: true
    data: {}
  
  kafkaCredentials:
    enabled: false
    data: {}

# PostgreSQL dependency (Bitnami chart)
postgresql:
  enabled: true
  auth:
    postgresPassword: postgres
    username: keycloak
    password: password
    database: keycloak
  primary:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m

# Kafka dependency (Bitnami chart)
kafka:
  enabled: true
  replicaCount: 1
  auth:
    enabled: false
  zookeeper:
    enabled: true
    replicaCount: 1
  topics:
    - name: keycloak.user.events
      partitions: 3
      replicationFactor: 1
    - name: keycloak.admin.events
      partitions: 3
      replicationFactor: 1
  persistence:
    enabled: true
    size: 8Gi
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m

# Monitoring configuration
monitoring:
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
  
  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    rules: []

# Network policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Extra manifests
extraManifests: []