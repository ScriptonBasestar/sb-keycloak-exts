{
  "tasks": [
    {
      "id": "614c4591-0486-4a2e-acf8-bc03dbbfa28c",
      "name": "events 모듈 디렉토리 구조 생성",
      "description": "루트 레벨에 events 디렉토리와 event-listener-kafka 서브모듈 생성. 기존 idps 모듈과 동일한 구조로 설정하여 일관성 유지",
      "notes": "idps/build.gradle의 설정을 참고하되, IDP 특화 설정은 제외하고 Event Listener에 필요한 설정으로 조정",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-16T20:57:37.053Z",
      "updatedAt": "2025-07-16T21:09:46.383Z",
      "relatedFiles": [
        {
          "path": "settings.gradle",
          "type": "TO_MODIFY",
          "description": "새 모듈 추가"
        },
        {
          "path": "events/build.gradle",
          "type": "CREATE",
          "description": "events 모듈 빌드 설정"
        },
        {
          "path": "events/event-listener-kafka/build.gradle",
          "type": "CREATE",
          "description": "Kafka 의존성 추가"
        }
      ],
      "implementationGuide": "1. /events 디렉토리 생성\n2. /events/build.gradle 파일 생성 (idps/build.gradle 구조 참조)\n3. /events/event-listener-kafka 서브모듈 디렉토리 생성\n4. settings.gradle에 'events:event-listener-kafka' 모듈 추가\n5. 기본 디렉토리 구조: src/main/kotlin, src/main/resources, src/test/kotlin",
      "verificationCriteria": "1. events 디렉토리가 루트에 생성됨\n2. settings.gradle에 모듈이 등록됨\n3. 빌드 스크립트가 정상 동작함",
      "analysisResult": "Keycloak Kafka Event Listener 구현 - EventListenerProvider SPI를 사용하여 사용자 인증 이벤트(로그인, 로그아웃, 등록 등)를 Kafka로 실시간 스트리밍하는 엔터프라이즈급 확장 기능. events 모듈을 새로 생성하여 기존 idps 모듈과 분리된 구조로 구현.",
      "summary": "events 모듈 디렉토리 구조가 성공적으로 생성되었습니다. 루트 레벨에 events 디렉토리와 event-listener-kafka 서브모듈이 생성되었고, settings.gradle에 모듈이 등록되었으며, 빌드 스크립트가 정상 동작함을 확인했습니다.",
      "completedAt": "2025-07-16T21:09:46.382Z"
    },
    {
      "id": "96b568c6-621e-4604-a1ae-ce81714dec27",
      "name": "KafkaEventListenerProvider 핵심 클래스 구현",
      "description": "EventListenerProvider 인터페이스를 구현하여 Keycloak 이벤트를 캡처하고 Kafka로 전송하는 핵심 로직 구현",
      "notes": "에러 처리와 로깅을 충분히 추가하여 운영 환경에서 디버깅 가능하도록 구현",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-16T20:57:37.053Z",
      "updatedAt": "2025-07-16T20:57:37.053Z",
      "relatedFiles": [
        {
          "path": "events/event-listener-kafka/src/main/kotlin/org/scriptonbasestar/kcexts/events/kafka/KafkaEventListenerProvider.kt",
          "type": "CREATE",
          "description": "핵심 Provider 클래스"
        }
      ],
      "implementationGuide": "```kotlin\nclass KafkaEventListenerProvider(\n    private val session: KeycloakSession,\n    private val config: KafkaEventListenerConfig,\n    private val producerManager: KafkaProducerManager\n) : EventListenerProvider {\n    \n    override fun onEvent(event: Event) {\n        // 1. 이벤트 필터링 (config의 includedEventTypes 확인)\n        // 2. KeycloakEvent 모델로 변환\n        // 3. Jackson으로 JSON 직렬화\n        // 4. Kafka로 비동기 발행\n    }\n    \n    override fun onEvent(event: AdminEvent, includeRepresentation: Boolean) {\n        // AdminEvent 처리 로직\n    }\n    \n    override fun close() {\n        // 리소스 정리\n    }\n}\n```",
      "verificationCriteria": "1. EventListenerProvider 인터페이스 모든 메서드 구현\n2. 이벤트 필터링 로직 동작\n3. JSON 직렬화 성공\n4. Kafka 발행 로직 포함",
      "analysisResult": "Keycloak Kafka Event Listener 구현 - EventListenerProvider SPI를 사용하여 사용자 인증 이벤트(로그인, 로그아웃, 등록 등)를 Kafka로 실시간 스트리밍하는 엔터프라이즈급 확장 기능. events 모듈을 새로 생성하여 기존 idps 모듈과 분리된 구조로 구현."
    },
    {
      "id": "c83f3d35-c6c9-4f34-986d-3a87463c204a",
      "name": "KafkaEventListenerProviderFactory 구현",
      "description": "Provider 인스턴스를 생성하고 관리하는 Factory 클래스 구현. Keycloak SPI 시스템과 통합을 담당",
      "notes": "ProducerManager는 싱글톤으로 관리하여 리소스 효율성 확보",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "96b568c6-621e-4604-a1ae-ce81714dec27"
        }
      ],
      "createdAt": "2025-07-16T20:57:37.053Z",
      "updatedAt": "2025-07-16T20:57:37.053Z",
      "relatedFiles": [
        {
          "path": "events/event-listener-kafka/src/main/kotlin/org/scriptonbasestar/kcexts/events/kafka/KafkaEventListenerProviderFactory.kt",
          "type": "CREATE",
          "description": "Factory 클래스"
        }
      ],
      "implementationGuide": "```kotlin\nclass KafkaEventListenerProviderFactory : EventListenerProviderFactory {\n    private var producerManager: KafkaProducerManager? = null\n    \n    override fun create(session: KeycloakSession): EventListenerProvider {\n        val config = KafkaEventListenerConfig(session)\n        return KafkaEventListenerProvider(session, config, getProducerManager(config))\n    }\n    \n    override fun init(config: Config.Scope) {\n        // Kafka 설정 초기화\n    }\n    \n    override fun postInit(factory: KeycloakSessionFactory) {\n        // 추가 초기화 로직\n    }\n    \n    override fun close() {\n        producerManager?.close()\n    }\n    \n    override fun getId(): String = \"kafka-event-listener\"\n}\n```",
      "verificationCriteria": "1. EventListenerProviderFactory 인터페이스 구현\n2. Provider 인스턴스 생성 성공\n3. 설정 초기화 로직 동작\n4. 리소스 정리 메서드 구현",
      "analysisResult": "Keycloak Kafka Event Listener 구현 - EventListenerProvider SPI를 사용하여 사용자 인증 이벤트(로그인, 로그아웃, 등록 등)를 Kafka로 실시간 스트리밍하는 엔터프라이즈급 확장 기능. events 모듈을 새로 생성하여 기존 idps 모듈과 분리된 구조로 구현."
    },
    {
      "id": "36e23ca0-0e83-4ba0-bd19-171a8cb37622",
      "name": "Kafka 설정 및 Producer 관리 구현",
      "description": "KafkaEventListenerConfig 클래스로 설정 관리, KafkaProducerManager로 Kafka Producer 라이프사이클 관리",
      "notes": "Kafka Producer 설정에 압축, 배치, 재시도 등 프로덕션 설정 포함",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-16T20:57:37.053Z",
      "updatedAt": "2025-07-16T20:57:37.053Z",
      "relatedFiles": [
        {
          "path": "events/event-listener-kafka/src/main/kotlin/org/scriptonbasestar/kcexts/events/kafka/KafkaEventListenerConfig.kt",
          "type": "CREATE",
          "description": "설정 클래스"
        },
        {
          "path": "events/event-listener-kafka/src/main/kotlin/org/scriptonbasestar/kcexts/events/kafka/KafkaProducerManager.kt",
          "type": "CREATE",
          "description": "Producer 관리 클래스"
        }
      ],
      "implementationGuide": "```kotlin\n// KafkaEventListenerConfig.kt\nclass KafkaEventListenerConfig(session: KeycloakSession) {\n    val bootstrapServers: String\n    val eventTopic: String\n    val adminEventTopic: String\n    val clientId: String\n    val includedEventTypes: Set<EventType>\n    // Keycloak realm 설정에서 읽기\n}\n\n// KafkaProducerManager.kt  \nclass KafkaProducerManager(config: KafkaEventListenerConfig) {\n    private val producer: KafkaProducer<String, String>\n    \n    fun sendEvent(topic: String, key: String, value: String) {\n        producer.send(ProducerRecord(topic, key, value)) { metadata, exception ->\n            // 콜백 처리\n        }\n    }\n}\n```",
      "verificationCriteria": "1. Keycloak 설정에서 값 읽기 성공\n2. Kafka Producer 초기화 성공\n3. 비동기 메시지 발행 동작\n4. 에러 처리 및 재시도 로직",
      "analysisResult": "Keycloak Kafka Event Listener 구현 - EventListenerProvider SPI를 사용하여 사용자 인증 이벤트(로그인, 로그아웃, 등록 등)를 Kafka로 실시간 스트리밍하는 엔터프라이즈급 확장 기능. events 모듈을 새로 생성하여 기존 idps 모듈과 분리된 구조로 구현."
    },
    {
      "id": "c238326a-0c44-4fe2-a600-cbb6f4e4d210",
      "name": "이벤트 데이터 모델 및 META-INF 설정",
      "description": "Keycloak 이벤트를 표현하는 데이터 모델 클래스 생성 및 SPI 서비스 등록을 위한 META-INF 설정",
      "notes": "Jackson 어노테이션 추가하여 JSON 직렬화 최적화",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "c83f3d35-c6c9-4f34-986d-3a87463c204a"
        }
      ],
      "createdAt": "2025-07-16T20:57:37.053Z",
      "updatedAt": "2025-07-16T20:57:37.053Z",
      "relatedFiles": [
        {
          "path": "events/event-listener-kafka/src/main/kotlin/org/scriptonbasestar/kcexts/events/kafka/model/KeycloakEvent.kt",
          "type": "CREATE",
          "description": "일반 이벤트 모델"
        },
        {
          "path": "events/event-listener-kafka/src/main/kotlin/org/scriptonbasestar/kcexts/events/kafka/model/KeycloakAdminEvent.kt",
          "type": "CREATE",
          "description": "관리자 이벤트 모델"
        },
        {
          "path": "events/event-listener-kafka/src/main/resources/META-INF/services/org.keycloak.events.EventListenerProviderFactory",
          "type": "CREATE",
          "description": "SPI 서비스 등록"
        }
      ],
      "implementationGuide": "```kotlin\n// model/KeycloakEvent.kt\ndata class KeycloakEvent(\n    val id: String,\n    val time: Long,\n    val type: String,\n    val realmId: String,\n    val clientId: String?,\n    val userId: String?,\n    val sessionId: String?,\n    val ipAddress: String?,\n    val details: Map<String, String>?\n)\n\n// model/KeycloakAdminEvent.kt\ndata class KeycloakAdminEvent(\n    val id: String,\n    val time: Long,\n    val operationType: String,\n    val realmId: String,\n    val authDetails: AuthDetails,\n    val resourcePath: String?,\n    val representation: String?\n)\n```\n\nMETA-INF/services/org.keycloak.events.EventListenerProviderFactory 파일:\n```\norg.scriptonbasestar.kcexts.events.kafka.KafkaEventListenerProviderFactory\n```",
      "verificationCriteria": "1. 데이터 모델이 Keycloak 이벤트 구조와 일치\n2. JSON 직렬화 가능\n3. META-INF 파일 올바른 위치에 생성\n4. Factory 클래스 경로 정확",
      "analysisResult": "Keycloak Kafka Event Listener 구현 - EventListenerProvider SPI를 사용하여 사용자 인증 이벤트(로그인, 로그아웃, 등록 등)를 Kafka로 실시간 스트리밍하는 엔터프라이즈급 확장 기능. events 모듈을 새로 생성하여 기존 idps 모듈과 분리된 구조로 구현."
    },
    {
      "id": "df5b2b07-6ee2-4817-88fb-57c639869ef6",
      "name": "테스트 코드 작성",
      "description": "단위 테스트와 통합 테스트 작성. TestContainers를 활용한 Kafka 통합 테스트 포함",
      "notes": "기존 IDP 테스트 패턴 참조하여 일관성 유지",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "96b568c6-621e-4604-a1ae-ce81714dec27"
        },
        {
          "taskId": "36e23ca0-0e83-4ba0-bd19-171a8cb37622"
        }
      ],
      "createdAt": "2025-07-16T20:57:37.053Z",
      "updatedAt": "2025-07-16T20:57:37.053Z",
      "relatedFiles": [
        {
          "path": "events/event-listener-kafka/src/test/kotlin/org/scriptonbasestar/kcexts/events/kafka/KafkaEventListenerProviderTest.kt",
          "type": "CREATE",
          "description": "Provider 단위 테스트"
        },
        {
          "path": "events/event-listener-kafka/src/test/kotlin/org/scriptonbasestar/kcexts/events/kafka/KafkaEventListenerIntegrationTest.kt",
          "type": "CREATE",
          "description": "Kafka 통합 테스트"
        }
      ],
      "implementationGuide": "```kotlin\n// KafkaEventListenerProviderTest.kt\nclass KafkaEventListenerProviderTest {\n    @Test\n    fun `should send event to Kafka when user login event occurs`() {\n        // Given: Mock 설정\n        // When: onEvent 호출\n        // Then: Kafka 메시지 발행 검증\n    }\n}\n\n// KafkaEventListenerIntegrationTest.kt\n@Testcontainers\nclass KafkaEventListenerIntegrationTest {\n    @Container\n    val kafka = KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:7.5.0\"))\n    \n    @Test\n    fun `should publish event to Kafka topic`() {\n        // TestContainers Kafka로 실제 발행 테스트\n    }\n}\n```",
      "verificationCriteria": "1. 모든 public 메서드에 대한 테스트 존재\n2. 정상/에러 케이스 모두 커버\n3. TestContainers Kafka 정상 동작\n4. 테스트 커버리지 80% 이상",
      "analysisResult": "Keycloak Kafka Event Listener 구현 - EventListenerProvider SPI를 사용하여 사용자 인증 이벤트(로그인, 로그아웃, 등록 등)를 Kafka로 실시간 스트리밍하는 엔터프라이즈급 확장 기능. events 모듈을 새로 생성하여 기존 idps 모듈과 분리된 구조로 구현."
    },
    {
      "id": "cd6832eb-0c2a-4711-b98b-2ce142c3a58e",
      "name": "README 문서 및 설정 가이드 작성",
      "description": "Kafka Event Listener 설치, 설정, 사용 방법을 설명하는 상세한 문서 작성",
      "notes": "기존 IDP README 형식과 일관성 유지",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "c238326a-0c44-4fe2-a600-cbb6f4e4d210"
        }
      ],
      "createdAt": "2025-07-16T20:57:37.053Z",
      "updatedAt": "2025-07-16T20:57:37.053Z",
      "relatedFiles": [
        {
          "path": "events/event-listener-kafka/README.md",
          "type": "CREATE",
          "description": "모듈 문서"
        },
        {
          "path": "README.md",
          "type": "TO_MODIFY",
          "description": "메인 README에 Event Listener 섹션 추가"
        }
      ],
      "implementationGuide": "README.md 내용:\n1. 개요 및 기능 설명\n2. 요구사항 (Keycloak 버전, Kafka 버전)\n3. 빌드 방법\n4. 설치 방법 (JAR 복사)\n5. Keycloak 설정 방법:\n   - Realm 설정에서 Event Listener 추가\n   - Kafka 연결 파라미터 설정\n6. 설정 옵션 상세 설명\n7. 이벤트 포맷 예시\n8. 문제 해결 가이드\n9. 성능 튜닝 팁",
      "verificationCriteria": "1. 설치 과정이 명확하게 설명됨\n2. 모든 설정 옵션 문서화\n3. 실제 사용 예시 포함\n4. 트러블슈팅 섹션 포함",
      "analysisResult": "Keycloak Kafka Event Listener 구현 - EventListenerProvider SPI를 사용하여 사용자 인증 이벤트(로그인, 로그아웃, 등록 등)를 Kafka로 실시간 스트리밍하는 엔터프라이즈급 확장 기능. events 모듈을 새로 생성하여 기존 idps 모듈과 분리된 구조로 구현."
    }
  ]
}