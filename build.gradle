plugins {
    alias(libs.plugins.asciidoctor) apply false
    alias(libs.plugins.kotlin.jvm) apply false
    alias(libs.plugins.kotlin.jpa) apply false
    alias(libs.plugins.kotlin.noarg) apply false
    alias(libs.plugins.kotlin.allopen) apply false
    alias(libs.plugins.kotlin.spring) apply false
    alias(libs.plugins.protobuf) apply false
    alias(libs.plugins.shadow) apply false
    alias(libs.plugins.nemerosa.versioning) apply false
    alias(libs.plugins.ktlint) apply false
    alias(libs.plugins.detekt) apply false
    alias(libs.plugins.dependency.check) apply false
}

allprojects {
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'org.owasp.dependencycheck'

    group = 'org.scriptonbasestar.keycloak.exts'
    version = '0.0.2-SNAPSHOT'

    repositories {
        mavenCentral()
        google()
    }

    ktlint {
        version.set("1.6.0")
        debug.set(false)
        verbose.set(true)
        android.set(false)
        outputToConsole.set(true)
        ignoreFailures.set(false)
        enableExperimentalRules.set(true)
        reporters {
            reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.PLAIN)
            reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.CHECKSTYLE)
            reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.SARIF)
        }
        filter {
            exclude("**/generated/**")
            exclude("**/build/**")
            include("**/kotlin/**")
        }
    }

    detekt {
        buildUponDefaultConfig = true
        allRules = false
        config = files("$projectDir/config/detekt/detekt.yml")
    }

    dependencyCheck {
        format = 'ALL'
        suppressionFile = 'config/dependency-check/suppressions.xml'
        failBuildOnCVSS = 7.0
        outputDirectory = "$buildDir/reports/dependency-check"
        analyzers {
            centralEnabled = true
            bundleAuditEnabled = true
            nodeEnabled = false
            assemblyEnabled = false
            nuspecEnabled = false
            pyDistributionEnabled = false
            pyPackageEnabled = false
            rubygemsEnabled = false
            composerEnabled = false
            cmakeEnabled = false
            autoconfEnabled = false
            nugetconfEnabled = false
            cocoapodsEnabled = false
            swiftEnabled = false
            msbuildEnabled = false
            golangDepEnabled = false
            golangModEnabled = false
        }
    }

    configurations {
        bundleLib
    }
}

//init.dependsOn(addKtlintCheckGitPreCommitHook)

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.jpa'
    apply plugin: 'org.jetbrains.kotlin.plugin.allopen'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.asciidoctor.jvm.convert'

    dependencies {
        // Kotlin
        implementation libs.bundles.kotlin
        implementation libs.kotlin.coroutines.reactor

        // Groovy
        implementation libs.bundles.groovy

        // Testing
        testImplementation libs.bundles.testing
        testImplementation libs.bundles.testcontainers

        // Enterprise Features
        implementation libs.bundles.jackson
        implementation libs.bundles.logging
        implementation libs.bundles.metrics
    }

    configurations {
        compileOnly {
//            extendsFrom(configurations.annotationProcessor)
            extendsFrom(annotationProcessor)
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    compileJava {
        options.annotationProcessorPath = configurations.annotationProcessor
    }
    
    compileKotlin {
        kotlinOptions {
            jvmTarget = '21'
            freeCompilerArgs = ['-Xjsr305=strict', '-opt-in=kotlin.RequiresOptIn']
        }
    }
    
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '21'
            freeCompilerArgs = ['-Xjsr305=strict', '-opt-in=kotlin.RequiresOptIn']
        }
    }
    
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
}
